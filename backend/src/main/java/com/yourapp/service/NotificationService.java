package com.yourapp.service;

import com.yourapp.model.Notification;
import com.yourapp.model.User;
import com.yourapp.model.NotificationType;
import com.yourapp.model.NotificationPriority;
import com.yourapp.dto.NotificationDTO;
import com.yourapp.repository.NotificationRepository;
import com.yourapp.repository.UserRepository;
import com.yourapp.exception.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
@Service
@RequiredArgsConstructor
public class NotificationService {
    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    
    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;
    private final SimpMessagingTemplate messagingTemplate;
    private final NotificationPreferencesService preferencesService;
    private final TelegramNotificationService telegramNotificationService;
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param relatedEntityId ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
     * @param relatedEntityType —Ç–∏–ø —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
     * @return —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ null, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
     */
    @Transactional
    public NotificationDTO createNotification(
            Long userId, 
            NotificationType type, 
            String title, 
            String message, 
            String relatedEntityId, 
            String relatedEntityType) {
        
        return createNotification(userId, type, title, message, relatedEntityId, relatedEntityType, 
                                null, getPriorityForType(type));
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param relatedEntityId ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
     * @param relatedEntityType —Ç–∏–ø —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
     * @param groupKey –∫–ª—é—á –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     * @return —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ null, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
     */
    @Transactional
    public NotificationDTO createNotification(
            Long userId, 
            NotificationType type, 
            String title, 
            String message, 
            String relatedEntityId, 
            String relatedEntityType,
            String groupKey,
            NotificationPriority priority) {
        
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (!shouldCreateNotification(user, type, priority)) {
            logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {} –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                    type, user.getUsername());
            return null;
        }
        
        Notification notification = Notification.builder()
                .user(user)
                .type(type.name())
                .title(title)
                .message(message)
                .relatedEntityId(relatedEntityId)
                .relatedEntityType(relatedEntityType)
                .groupKey(groupKey)
                .priority(priority)
                .isRead(false)
                .isArchived(false)
                .build();
        
        Notification savedNotification = notificationRepository.save(notification);
        logger.info("–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", savedNotification.getId(), user.getUsername());
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DTO
        NotificationDTO notificationDTO = mapToDTO(savedNotification);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket (—Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        if (shouldSendBrowserNotification(user, type, priority)) {
            messagingTemplate.convertAndSendToUser(
                    user.getUsername(),
                    "/queue/notifications",
                    notificationDTO
            );
            logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user.getUsername());
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        sendTelegramNotificationIfEnabled(user, type, title, message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        long newUnreadCount = getUnreadCount(userId);
        messagingTemplate.convertAndSendToUser(
                user.getUsername(),
                "/queue/unread-count",
                Map.of("count", newUnreadCount)
        );
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ {} —á–µ—Ä–µ–∑ WebSocket –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", newUnreadCount, user.getUsername());
        
        return notificationDTO;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private void sendTelegramNotificationIfEnabled(User user, NotificationType type, String title, String message) {
        try {
            var preferences = preferencesService.getUserPreferences(user.getId());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            if (!preferences.isGlobalNotificationsEnabled() || !preferences.isTelegramNotificationsEnabled()) {
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
            boolean typeEnabled = switch (type) {
                case TASK_ASSIGNED -> preferences.isTaskAssignedNotifications();
                case TASK_UPDATED -> preferences.isTaskUpdatedNotifications();
                case TASK_STATUS_CHANGED -> preferences.isTaskStatusChangedNotifications();
                case NEW_COMMENT_MENTION -> preferences.isMentionNotifications();
                case TASK_CREATED -> preferences.isTaskCreatedNotifications();
                case TASK_DELETED -> preferences.isTaskDeletedNotifications();
                case TASK_COMMENT_ADDED -> preferences.isTaskCommentAddedNotifications();
                case SUBTASK_CREATED -> preferences.isSubtaskCreatedNotifications();
                case SUBTASK_COMPLETED -> preferences.isSubtaskCompletedNotifications();
                case BOARD_INVITE -> preferences.isBoardInviteNotifications();
                case BOARD_MEMBER_ADDED -> preferences.isBoardMemberAddedNotifications();
                case BOARD_MEMBER_REMOVED -> preferences.isBoardMemberRemovedNotifications();
                case ATTACHMENT_ADDED -> preferences.isAttachmentAddedNotifications();
                case DEADLINE_REMINDER -> preferences.isDeadlineReminderNotifications();
                case ROLE_CHANGED -> preferences.isRoleChangedNotifications();
                case TASK_DUE_SOON -> preferences.isTaskDueSoonNotifications();
                case TASK_OVERDUE -> preferences.isTaskOverdueNotifications();
                default -> false;
            };
            
            if (!typeEnabled) {
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ TelegramNotificationService
            String telegramMessage = String.format("üì¢ %s\n\n%s", title, message);
            telegramNotificationService.sendNotification(user, telegramMessage);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.getUsername(), e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return true, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ
     */
    private boolean shouldCreateNotification(User user, NotificationType type, NotificationPriority priority) {
        var preferences = preferencesService.getUserPreferences(user.getId());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!preferences.isGlobalNotificationsEnabled()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (preferences.isOnlyHighPriorityNotifications() && 
            (priority == null || priority != NotificationPriority.HIGH)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        return switch (type) {
            case TASK_ASSIGNED -> preferences.isTaskAssignedNotifications();
            case TASK_UPDATED -> preferences.isTaskUpdatedNotifications();
            case TASK_STATUS_CHANGED -> preferences.isTaskStatusChangedNotifications();
            case NEW_COMMENT_MENTION -> preferences.isMentionNotifications();
            case TASK_CREATED -> preferences.isTaskCreatedNotifications();
            case TASK_DELETED -> preferences.isTaskDeletedNotifications();
            case TASK_COMMENT_ADDED -> preferences.isTaskCommentAddedNotifications();
            case SUBTASK_CREATED -> preferences.isSubtaskCreatedNotifications();
            case SUBTASK_COMPLETED -> preferences.isSubtaskCompletedNotifications();
            case BOARD_INVITE -> preferences.isBoardInviteNotifications();
            case BOARD_MEMBER_ADDED -> preferences.isBoardMemberAddedNotifications();
            case BOARD_MEMBER_REMOVED -> preferences.isBoardMemberRemovedNotifications();
            case ATTACHMENT_ADDED -> preferences.isAttachmentAddedNotifications();
            case DEADLINE_REMINDER -> preferences.isDeadlineReminderNotifications();
            case ROLE_CHANGED -> preferences.isRoleChangedNotifications();
            case TASK_DUE_SOON -> preferences.isTaskDueSoonNotifications();
            case TASK_OVERDUE -> preferences.isTaskOverdueNotifications();
            default -> true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return true, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
     */
    private boolean shouldSendBrowserNotification(User user, NotificationType type, NotificationPriority priority) {
        var preferences = preferencesService.getUserPreferences(user.getId());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (!preferences.isGlobalNotificationsEnabled() || !preferences.isBrowserNotificationsEnabled()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (preferences.isOnlyHighPriorityNotifications() && 
            (priority == null || priority != NotificationPriority.HIGH)) {
            return false;
        }
        
        // –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è —Ç–µ—Ö –∂–µ —Ç–∏–ø–æ–≤, —á—Ç–æ –∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
        return shouldCreateNotification(user, type, priority);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param pageable –ø–∞–≥–∏–Ω–∞—Ü–∏—è
     * @return —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Transactional(readOnly = true)
    public Page<NotificationDTO> getUserNotifications(Long userId, Pageable pageable) {
        if (userId == null) {
            return Page.empty(pageable);
        }
        
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return Page.empty(pageable);
        }
        
        return notificationRepository.findByUserAndIsArchivedFalseOrderByCreatedAtDesc(user, pageable)
                .map(this::mapToDTO);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Transactional(readOnly = true)
    public List<NotificationDTO> getUnreadNotifications(Long userId) {
        if (userId == null) {
            return Collections.emptyList();
        }
        
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return Collections.emptyList();
        }
        
        return notificationRepository.findByUserAndIsReadFalseAndIsArchivedFalseOrderByPriorityDescCreatedAtDesc(user)
                .stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
     * @param notificationId ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    @Transactional
    public NotificationDTO markAsRead(Long notificationId, Long userId) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new EntityNotFoundException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID " + notificationId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getId().equals(userId)) {
            throw new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
        
        notification.setRead(true);
        notification.setReadAt(java.time.LocalDateTime.now());
        
        Notification savedNotification = notificationRepository.save(notification);
        logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ. isRead: {}, readAt: {}", 
            savedNotification.getId(), savedNotification.isRead(), savedNotification.getReadAt());
        
        NotificationDTO notificationDTO = mapToDTO(savedNotification);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        long newUnreadCount = getUnreadCount(userId);
        messagingTemplate.convertAndSendToUser(
                notification.getUser().getUsername(),
                "/queue/unread-count",
                Map.of("count", newUnreadCount)
        );
        
        return notificationDTO;
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Transactional
    public int markAllAsRead(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        int count = notificationRepository.markAllAsRead(user);
        logger.debug("–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ {} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", count, user.getUsername());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        if (count > 0) {
            long newUnreadCount = getUnreadCount(userId);
            messagingTemplate.convertAndSendToUser(
                    user.getUsername(),
                    "/queue/unread-count",
                    Map.of("count", newUnreadCount)
            );
        }
        
        return count;
    }
    
    /**
     * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param notificationId ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    @Transactional
    public NotificationDTO archiveNotification(Long notificationId, Long userId) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new EntityNotFoundException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID " + notificationId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getId().equals(userId)) {
            throw new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
        
        notification.setArchived(true);
        notification.setRead(true); // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
        return mapToDTO(notificationRepository.save(notification));
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Transactional(readOnly = true)
    public long getUnreadCount(Long userId) {
        if (userId == null) {
            return 0;
        }
        
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return 0;
        }
        
        return notificationRepository.countByUserAndIsReadFalseAndIsArchivedFalse(user);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param pageable –ø–∞–≥–∏–Ω–∞—Ü–∏—è
     * @return —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Transactional(readOnly = true)
    public Page<NotificationDTO> getArchivedNotifications(Long userId, Pageable pageable) {
        if (userId == null) {
            return Page.empty(pageable);
        }
        
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return Page.empty(pageable);
        }
        
        return notificationRepository.findByUserAndIsArchivedTrueOrderByCreatedAtDesc(user, pageable)
                .map(this::mapToDTO);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     */
    private NotificationPriority getPriorityForType(NotificationType type) {
        switch (type) {
            case TASK_OVERDUE:
            case NEW_COMMENT_MENTION:
                return NotificationPriority.CRITICAL;
            case BOARD_INVITE:
            case TASK_ASSIGNED:
            case TASK_DUE_SOON:
            case ROLE_CHANGED:
                return NotificationPriority.HIGH;
            case TASK_CREATED:
            case TASK_COMMENT_ADDED:
            case SUBTASK_COMPLETED:
            case BOARD_MEMBER_ADDED:
            case BOARD_MEMBER_REMOVED:
            case DEADLINE_REMINDER:
                return NotificationPriority.NORMAL;
            case TASK_UPDATED:
            case TASK_STATUS_CHANGED:
            case SUBTASK_CREATED:
            case ATTACHMENT_ADDED:
                return NotificationPriority.LOW;
            default:
                return NotificationPriority.NORMAL;
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å Notification –≤ DTO
     * @param notification –º–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return DTO —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private NotificationDTO mapToDTO(Notification notification) {
        return NotificationDTO.builder()
                .id(notification.getId())
                .title(notification.getTitle())
                .message(notification.getMessage())
                .type(notification.getType())
                .priority(notification.getPriority())
                .relatedEntityId(notification.getRelatedEntityId())
                .relatedEntityType(notification.getRelatedEntityType())
                .groupKey(notification.getGroupKey())
                .isRead(notification.isRead())
                .isArchived(notification.isArchived())
                .createdAt(notification.getCreatedAt())
                .updatedAt(notification.getUpdatedAt())
                .readAt(notification.getReadAt())
                .build();
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param notificationId ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void deleteNotification(Long notificationId, Long userId) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new EntityNotFoundException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID " + notificationId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getId().equals(userId)) {
            throw new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
        
        notificationRepository.delete(notification);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        long newUnreadCount = getUnreadCount(userId);
        messagingTemplate.convertAndSendToUser(
                notification.getUser().getUsername(),
                "/queue/unread-count",
                Map.of("count", newUnreadCount)
        );
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param notificationIds —Å–ø–∏—Å–æ–∫ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void deleteNotifications(List<Long> notificationIds, Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        List<Notification> notifications = notificationRepository.findByIdInAndUser(notificationIds, user);
        
        if (notifications.size() != notificationIds.size()) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
        
        notificationRepository.deleteAll(notifications);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        long newUnreadCount = getUnreadCount(userId);
        messagingTemplate.convertAndSendToUser(
                user.getUsername(),
                "/queue/unread-count",
                Map.of("count", newUnreadCount)
        );
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     * @param notificationIds —Å–ø–∏—Å–æ–∫ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void markMultipleAsRead(List<Long> notificationIds, Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        List<Notification> notifications = notificationRepository.findByIdInAndUserAndIsReadFalse(notificationIds, user);
        
        if (!notifications.isEmpty()) {
            for (Notification notification : notifications) {
                notification.setRead(true);
                notification.setReadAt(java.time.LocalDateTime.now());
            }
            notificationRepository.saveAll(notifications);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
            long newUnreadCount = getUnreadCount(userId);
            messagingTemplate.convertAndSendToUser(
                    user.getUsername(),
                    "/queue/unread-count",
                    Map.of("count", newUnreadCount)
            );
        }
    }
}